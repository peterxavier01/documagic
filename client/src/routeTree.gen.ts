/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ToolsIndexImport } from './routes/tools/index'
import { Route as appIndexImport } from './routes/(app)/index'
import { Route as authRegisterImport } from './routes/(auth)/register'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as ToolstextTextExtractorImport } from './routes/tools/(text)/text-extractor'
import { Route as ToolstextNewExtractionImport } from './routes/tools/(text)/new-extraction'
import { Route as ToolsequationEquationExtractorImport } from './routes/tools/(equation)/equation-extractor'
import { Route as ToolstextExtractionExtractionIdImport } from './routes/tools/(text)/extraction/$extractionId'

// Create Virtual Routes

const appPricingLazyImport = createFileRoute('/(app)/pricing')()
const appContactLazyImport = createFileRoute('/(app)/contact')()

// Create/Update Routes

const ToolsIndexRoute = ToolsIndexImport.update({
  path: '/tools/',
  getParentRoute: () => rootRoute,
} as any)

const appIndexRoute = appIndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const appPricingLazyRoute = appPricingLazyImport
  .update({
    path: '/pricing',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(app)/pricing.lazy').then((d) => d.Route))

const appContactLazyRoute = appContactLazyImport
  .update({
    path: '/contact',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(app)/contact.lazy').then((d) => d.Route))

const authRegisterRoute = authRegisterImport.update({
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ToolstextTextExtractorRoute = ToolstextTextExtractorImport.update({
  path: '/tools/text-extractor',
  getParentRoute: () => rootRoute,
} as any)

const ToolstextNewExtractionRoute = ToolstextNewExtractionImport.update({
  path: '/tools/new-extraction',
  getParentRoute: () => rootRoute,
} as any)

const ToolsequationEquationExtractorRoute =
  ToolsequationEquationExtractorImport.update({
    path: '/tools/equation-extractor',
    getParentRoute: () => rootRoute,
  } as any)

const ToolstextExtractionExtractionIdRoute =
  ToolstextExtractionExtractionIdImport.update({
    path: '/tools/extraction/$extractionId',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterImport
      parentRoute: typeof rootRoute
    }
    '/(app)/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof appContactLazyImport
      parentRoute: typeof rootRoute
    }
    '/(app)/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof appPricingLazyImport
      parentRoute: typeof rootRoute
    }
    '/(app)/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexImport
      parentRoute: typeof rootRoute
    }
    '/tools/': {
      id: '/tools/'
      path: '/tools'
      fullPath: '/tools'
      preLoaderRoute: typeof ToolsIndexImport
      parentRoute: typeof rootRoute
    }
    '/tools/(equation)/equation-extractor': {
      id: '/tools/equation-extractor'
      path: '/tools/equation-extractor'
      fullPath: '/tools/equation-extractor'
      preLoaderRoute: typeof ToolsequationEquationExtractorImport
      parentRoute: typeof rootRoute
    }
    '/tools/(text)/new-extraction': {
      id: '/tools/new-extraction'
      path: '/tools/new-extraction'
      fullPath: '/tools/new-extraction'
      preLoaderRoute: typeof ToolstextNewExtractionImport
      parentRoute: typeof rootRoute
    }
    '/tools/(text)/text-extractor': {
      id: '/tools/text-extractor'
      path: '/tools/text-extractor'
      fullPath: '/tools/text-extractor'
      preLoaderRoute: typeof ToolstextTextExtractorImport
      parentRoute: typeof rootRoute
    }
    '/tools/(text)/extraction/$extractionId': {
      id: '/tools/extraction/$extractionId'
      path: '/tools/extraction/$extractionId'
      fullPath: '/tools/extraction/$extractionId'
      preLoaderRoute: typeof ToolstextExtractionExtractionIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  authLoginRoute,
  authRegisterRoute,
  appContactLazyRoute,
  appPricingLazyRoute,
  appIndexRoute,
  ToolsIndexRoute,
  ToolsequationEquationExtractorRoute,
  ToolstextNewExtractionRoute,
  ToolstextTextExtractorRoute,
  ToolstextExtractionExtractionIdRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/login",
        "/register",
        "/contact",
        "/pricing",
        "/",
        "/tools/",
        "/tools/equation-extractor",
        "/tools/new-extraction",
        "/tools/text-extractor",
        "/tools/extraction/$extractionId"
      ]
    },
    "/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/register": {
      "filePath": "(auth)/register.tsx"
    },
    "/contact": {
      "filePath": "(app)/contact.lazy.tsx"
    },
    "/pricing": {
      "filePath": "(app)/pricing.lazy.tsx"
    },
    "/": {
      "filePath": "(app)/index.tsx"
    },
    "/tools/": {
      "filePath": "tools/index.tsx"
    },
    "/tools/equation-extractor": {
      "filePath": "tools/(equation)/equation-extractor.tsx"
    },
    "/tools/new-extraction": {
      "filePath": "tools/(text)/new-extraction.tsx"
    },
    "/tools/text-extractor": {
      "filePath": "tools/(text)/text-extractor.tsx"
    },
    "/tools/extraction/$extractionId": {
      "filePath": "tools/(text)/extraction/$extractionId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
