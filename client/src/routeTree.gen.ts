/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as ToolsIndexImport } from './routes/tools/index'
import { Route as ToolsTextExtractorImport } from './routes/tools/text-extractor'
import { Route as ToolsEquationExtractorImport } from './routes/tools/equation-extractor'

// Create Virtual Routes

const PricingLazyImport = createFileRoute('/pricing')()
const ContactLazyImport = createFileRoute('/contact')()

// Create/Update Routes

const PricingLazyRoute = PricingLazyImport.update({
  path: '/pricing',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/pricing.lazy').then((d) => d.Route))

const ContactLazyRoute = ContactLazyImport.update({
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/contact.lazy').then((d) => d.Route))

const RegisterRoute = RegisterImport.update({
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ToolsIndexRoute = ToolsIndexImport.update({
  path: '/tools/',
  getParentRoute: () => rootRoute,
} as any)

const ToolsTextExtractorRoute = ToolsTextExtractorImport.update({
  path: '/tools/text-extractor',
  getParentRoute: () => rootRoute,
} as any)

const ToolsEquationExtractorRoute = ToolsEquationExtractorImport.update({
  path: '/tools/equation-extractor',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactLazyImport
      parentRoute: typeof rootRoute
    }
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingLazyImport
      parentRoute: typeof rootRoute
    }
    '/tools/equation-extractor': {
      id: '/tools/equation-extractor'
      path: '/tools/equation-extractor'
      fullPath: '/tools/equation-extractor'
      preLoaderRoute: typeof ToolsEquationExtractorImport
      parentRoute: typeof rootRoute
    }
    '/tools/text-extractor': {
      id: '/tools/text-extractor'
      path: '/tools/text-extractor'
      fullPath: '/tools/text-extractor'
      preLoaderRoute: typeof ToolsTextExtractorImport
      parentRoute: typeof rootRoute
    }
    '/tools/': {
      id: '/tools/'
      path: '/tools'
      fullPath: '/tools'
      preLoaderRoute: typeof ToolsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  LoginRoute,
  RegisterRoute,
  ContactLazyRoute,
  PricingLazyRoute,
  ToolsEquationExtractorRoute,
  ToolsTextExtractorRoute,
  ToolsIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/register",
        "/contact",
        "/pricing",
        "/tools/equation-extractor",
        "/tools/text-extractor",
        "/tools/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/contact": {
      "filePath": "contact.lazy.tsx"
    },
    "/pricing": {
      "filePath": "pricing.lazy.tsx"
    },
    "/tools/equation-extractor": {
      "filePath": "tools/equation-extractor.tsx"
    },
    "/tools/text-extractor": {
      "filePath": "tools/text-extractor.tsx"
    },
    "/tools/": {
      "filePath": "tools/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
